# This script shows commands used for processing small RNA data from J. hindsii. Similar commands were used for other data sets from other species.

import pandas as pd

HINDSII = ['JHIN_PC_006_S5', 'JHIN_PC_010_S1', 'JHIN_PC_012_S2', 'JHIN_PC_049_S3', 'JHIN_PC_050_S4']

HINDSII_PA = ['JHIN_PC_006_S5', 'JHIN_PC_010_S1', 'JHIN_PC_012_S2']
HINDSII_PG = ['JHIN_PC_049_S3', 'JHIN_PC_050_S4']


# Local path to genome. Genome assembly uploaded to NCBI
RAWLINS_GNOM_HAP2 = "/group/gmcoopgrp2/jgroh/heterodichogamy2/HiFi_assemblies/Rawlins/final/Rawlins_hap2.fasta" # G haplotype

# Files can be generated by uncommenting lines below. It is not recommended to run the entire pipeline at once. 
rule all:
  input:
#    expand("results/{unit}_reads/{sample}.txt", unit =['GJ1', 'utr', 'GJ1a', 'GJ1b', 'GJ1c'], sample = HINDSII_PG),
#    expand("results/hindsii_GJ1_reads/{sample}.txt", sample = HINDSII_PG),
#    expand("results/read_lengths/wg/{sample}.txt", sample = HINDSII),
#    expand("results/coverage/Rawlins_hap2/{param}/{sample}_Gloc.txt.gz", param = ['m1','m12', 'm1_forward', 'm1_reverse', 'm12_forward', 'm12_reverse'], sample = HINDSII),
#    expand("results/coverage/Rawlins_hap2/{param}/{sample}_total.txt", param = ['m12'], sample = HINDSII), 
#    expand("results/n_reads/{sample}.txt", sample = HINDSII)


rule trim1:
  input:
    "/home/jgroh/heterodichogamy/smallRNAs/raw_reads/{sample}_R1.fastq.gz"
  output:
    "trimmed/{sample}-trimmed.fastq.gz"
  conda:
    "/home/jgroh/heterodichogamy/conda_envs/skewer.yaml"
  threads:
    20
  shell:
    """
    skewer -x TGGAATTCTCGGGTGCCAAGG -m tail --compress --output trimmed/{wildcards.sample} {input}
    """


rule n_reads:
  input:
    "trimmed/{sample}-trimmed.fastq.gz"
  output:
    "results/n_reads/{sample}.txt"
  shell:
    """
    grep -c "^@" {input} > {output}
    """

rule read_lengths_wg:
  input:
    "trimmed/{sample}-trimmed.fastq.gz"
  output:
    "results/read_lengths/wg/{sample}.txt"
  shell:
    "zcat {input} | awk 'NR%4==2 {{print length}}' | sort | uniq -c > {output}"


rule bowtie_index_rawlins:
  input:
    ref=RAWLINS_GNOM_HAP2
  output:
    RAWLINS_GNOM_HAP2+".1.ebwt"
  shell:
    "bowtie-build {input} {input}"

rule bowtie_hindsii_m12:
  input:
    ref=RAWLINS_GNOM_HAP2,
    fq="trimmed/{sample}-trimmed.fastq.gz",
    index=RAWLINS_GNOM_HAP2+".1.ebwt"
  output:
    "alignment_files/Rawlins_hap2/m12/{sample}.bam"
  threads:
    50
  resources:
    mem_mb=50000,
    runtime=6*60
  shell:
    """
    bowtie --threads {threads} -a -v 0 -m 12 --best --strata -S -x {input.ref} {input.fq} | samtools sort -o {output} -
    """

rule bowtie_hindsii_m1:
  input:
    ref=RAWLINS_GNOM_HAP2,
    fq="trimmed/{sample}-trimmed.fastq.gz",
    index=RAWLINS_GNOM_HAP2+".1.ebwt"
  output:
    "alignment_files/Rawlins_hap2/m1/{sample}.bam"
  threads:
    50
  resources:
    mem_mb=50000,
    runtime=6*60
  shell:
    """
    bowtie --threads {threads} -v 0 -m 1 -S -x {input.ref} {input.fq} | samtools sort -o {output} -
    """

rule extract_forward_m12:
  input:
    "alignment_files/Rawlins_hap2/m12/{sample}.bam"
  output:
    forward="alignment_files/Rawlins_hap2/m12_forward/{sample}.bam", 
    rev="alignment_files/Rawlins_hap2/m12_reverse/{sample}.bam", 
  threads:
    20
  conda:
    "/home/jgroh/heterodichogamy/conda_envs/samtools_1.17.yaml"
  shell:
    """
    samtools view -F 16 -o {output.forward} {input}
    samtools view -f 16 -o {output.rev} {input}
    """

rule extract_forward_m1:
  input:
    "alignment_files/Rawlins_hap2/m1/{sample}.bam"
  output:
    forward="alignment_files/Rawlins_hap2/m1_forward/{sample}.bam", 
    rev="alignment_files/Rawlins_hap2/m1_reverse/{sample}.bam", 
  threads:
    20
  conda:
    "/home/jgroh/heterodichogamy/conda_envs/samtools_1.17.yaml"
  shell:
    """
    samtools view -F 16 -o {output.forward} {input}
    samtools view -f 16 -o {output.rev} {input}
    """

rule index_bam:
  input:
    "alignment_files/{genome}/{param}/{sample}.bam"
  output:
    "alignment_files/{genome}/{param}/{sample}.bam.bai"
  conda:
    "/home/jgroh/heterodichogamy/conda_envs/samtools_1.17.yaml"
  shell:
    "samtools index {input}"


rule depth_WG:
  input:
    bam="alignment_files/Rawlins_hap2/{param}/{sample}.bam",
    bai="alignment_files/Rawlins_hap2/{param}/{sample}.bam.bai"
  output:
    "results/coverage/Rawlins_hap2/{param}/{sample}_total.txt"
  conda:
    "/home/jgroh/heterodichogamy/conda_envs/samtools_1.17.yaml"
  shell:
    "samtools depth -a {input.bam} | awk '{{sum += $3 }} END {{ mean = sum / NR; print mean}}' > {output}"
  


# Rules below extract reads aligning to regions of interest. Coordinates of these regions were manually curated based on alignments of haplotypes. 

rule depth_Gloc:
  input:
    bam="alignment_files/Rawlins_hap2/{param}/{sample}.bam",
    bai="alignment_files/Rawlins_hap2/{param}/{sample}.bam.bai"
  output:
    "results/coverage/Rawlins_hap2/{param}/{sample}_Gloc.txt.gz"
  conda:
    "/home/jgroh/heterodichogamy/conda_envs/samtools_1.17.yaml"
  shell:
    "samtools depth -a {input.bam} -r NC_049911.1:32315000-32355000 | gzip > {output}"

    
rule extract_GJ1_reads: # this will generate a table with (1) number of alignments (2) read id (3) sequence
  input:
    bam="alignment_files/Rawlins_hap2/m12/{sample}.bam",
    bai="alignment_files/Rawlins_hap2/m12/{sample}.bam.bai",
  output:
    "results/GJ1_reads/{sample}.txt"
  conda:
    "/home/jgroh/heterodichogamy/conda_envs/samtools_1.17.yaml"
  shell:
    """
    samtools view alignment_files/Rawlins_hap2/m12/{wildcards.sample}.bam NC_049911.1:32334644-32344690 | awk '{{print $1 "\t" $10}}' | sort | uniq -c > {output}
    """

rule extract_utr_reads: # this will generate a table with (1) number of alignments (2) read id (3) sequence
  input:
    bam="alignment_files/Rawlins_hap2/m12/{sample}.bam",
    bai="alignment_files/Rawlins_hap2/m12/{sample}.bam.bai",
  output:
    "results/utr_reads/{sample}.txt"
  conda:
    "/home/jgroh/heterodichogamy/conda_envs/samtools_1.17.yaml"
  shell:
    """
    samtools view --targets-file TPPD1_3UTR_coords.bed {input} | awk '{{print $1 "\t" $10}}' | sort | uniq -c > {output}
    """

rule extract_GJ1a_reads: # this will generate a table with (1) number of alignments (2) read id (3) sequence
  input:
    bam="alignment_files/Rawlins_hap2/m12/{sample}.bam",
    bai="alignment_files/Rawlins_hap2/m12/{sample}.bam.bai",
  output:
    "results/GJ1a_reads/{sample}.txt"
  conda:
    "/home/jgroh/heterodichogamy/conda_envs/samtools_1.17.yaml"
  shell:
    """
    samtools view --targets-file GJ1a_coords_Rawlins_hap2.bed {input} | awk '{{print $1 "\t" $10}}' | sort | uniq -c > {output}
    """

rule extract_GJ1b_reads: # this will generate a table with (1) number of alignments (2) read id (3) sequence
  input:
    bam="alignment_files/Rawlins_hap2/m12/{sample}.bam",
    bai="alignment_files/Rawlins_hap2/m12/{sample}.bam.bai",
  output:
    "results/GJ1b_reads/{sample}.txt"
  conda:
    "/home/jgroh/heterodichogamy/conda_envs/samtools_1.17.yaml"
  shell:
    """
    samtools view --targets-file GJ1b_coords_Rawlins_hap2.bed {input} | awk '{{print $1 "\t" $10}}' | sort | uniq -c > {output}
    """

rule extract_GJ1c_reads: # this will generate a table with (1) number of alignments (2) read id (3) sequence
  input:
    bam="alignment_files/Rawlins_hap2/m12/{sample}.bam",
    bai="alignment_files/Rawlins_hap2/m12/{sample}.bam.bai",
  output:
    "results/GJ1c_reads/{sample}.txt"
  conda:
    "/home/jgroh/heterodichogamy/conda_envs/samtools_1.17.yaml"
  shell:
    """
    samtools view --targets-file GJ1c_coords_Rawlins_hap2.bed {input} | awk '{{print $1 "\t" $10}}' | sort | uniq -c > {output}
    """
